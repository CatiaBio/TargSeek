# Snakefile_analysis
# ------------------------------------------------------
# TargSeek Analysis Workflow
#
# This pipeline performs MSA (MAFFT), alignment trimming, quality assessment,
# conservation analysis, epitope prediction, and report generation.
#
# Configuration: config/config_analysis.yaml
# Usage Guide: USAGE_ANALYSIS.txt
#
# Quick Start: snakemake -s Snakefile_analysis all_analysis --cores 4
# ------------------------------------------------------

# Load configuration
configfile: "config/config_analysis.yaml"

# Define wildcard constraints to prevent ambiguous matches
wildcard_constraints:
    analysis="analysis[0-9]+",
    paramset="params[0-9]+",
    use_3d_dir="(no_3d|with_3d)"


# =============================================================================
# TARGET RULES
# =============================================================================

# ConSurf conservation analysis only
rule all_consurf_analysis:
    input:
        expand(
            config["paths"]["conservation"]["consurf_sentinel"],
            analysis=config["species_batches"],
            paramset=config["quickgo_paramsets"],
            group=["positive", "negative"]
        )

# Integrated epitope analysis combining BepiPred, ConSurf, and Topology
rule all_integrated_epitope_analysis:
    input:
        expand(
            config["paths"]["integrated_epitope_analysis"]["sentinel"].replace("integrated_analysis_complete.sentinel", "gram_{group}/integrated_analysis_complete.sentinel"),
            analysis=config["species_batches"],
            paramset=config["quickgo_paramsets"],
            group=["positive", "negative"]
        )

# Comprehensive epitope visualizations for all genes
rule all_comprehensive_epitope_visualizations:
    input:
        expand(
            config["paths"]["integrated_epitope_analysis"]["output_dir"] + "/gram_{group}/.visualization_complete.sentinel",
            analysis=config["species_batches"],
            paramset=config["quickgo_paramsets"],
            group=["positive", "negative"]
        )

# Complete analysis pipeline - all stages
rule all_analysis:
    input:
        expand(
            [
                config["paths"]["conservation"]["results_structure"],
                config["paths"]["conservation"]["consurf_sentinel"],
                config["paths"]["conserved"]["raw_sequences_structure"],
                config["paths"]["conserved"]["trimmed_sequences_structure"]
            ],
            analysis=config["species_batches"],
            paramset=config["quickgo_paramsets"],
            group=["positive", "negative"]
        ) + expand(
            [
                config["paths"]["epitopes"]["epitope_tables_sentinel"].replace("epitope_tables_complete.sentinel", "gram_{group}/epitope_tables_complete.sentinel"),
                config["paths"]["topology"]["filtered_epitopes_sentinel"].replace("filtered_epitopes_complete.sentinel", "gram_{group}/filtered_epitopes_complete.sentinel"),
                config["paths"]["topology"]["topology_filter_report"].replace("epitope_filter_report.json", "gram_{group}/epitope_filter_report.json")
            ],
            analysis=config["species_batches"],
            paramset=config["quickgo_paramsets"],
            group=["positive", "negative"]
        ) + expand(
            [config["paths"]["epitopes"]["conservation_report"].replace("protein_analysis_report.html", "gram_{group}/protein_analysis_report.html")],
            analysis=config["species_batches"],
            paramset=config["quickgo_paramsets"],
            group=["positive", "negative"]
        )


# =============================================================================
# ANALYSIS RULES
# =============================================================================

# ---------------------
# STAGE 1: Create sequences with diversity-based selection
# ---------------------

rule select_sequences_for_msa:
    input:
        gene_lists="results/{analysis}_{paramset}/gene_selection/genes_species/gram_{group}",
        protein_download_sentinel="data/protein_sequences/.{analysis}_{paramset}_{group}_download_complete"
    output:
        sequences_dir=directory("results/{analysis}_{paramset}/protein_analysis/msa_fasta/gram_{group}")
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}"
    script:
        config["scripts"]["sequence_prep"]["create_sequences"]

# ---------------------
# STAGE 2: Select optimal 3D structures using 5 sequences from MSA
# ---------------------

rule select_3d_sequence_per_protein:
    input:
        reference_dir="results/{analysis}_{paramset}/protein_analysis/msa_fasta/gram_{group}",
        protein_download_sentinel="data/protein_sequences/.{analysis}_{paramset}_{group}_download_complete",
        structures_download_sentinel="data/protein_structures/.{analysis}_{paramset}_{group}_structures_complete"
    output:
        selected_3d_paths=config["paths"]["sequence_prep"]["selected_3d_paths"],
        selected_3d_tsv=config["paths"]["sequence_prep"]["selected_3d_tsv"]
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}",
        structure_selection_method=config.get("structure_selection", {}).get("method", "similarity"),
        max_structures_per_gene=config.get("structure_selection", {}).get("max_structures_per_gene", 1),
        min_similarity_score=config.get("structure_selection", {}).get("min_similarity_score", 0.1),
        similarity_method=config.get("structure_selection", {}).get("similarity_method", "local_alignment")
    script:
        config["scripts"]["sequence_prep"]["select_3d_from_sequences"]

# ---------------------
# STAGE 2.5: Predict membrane protein topology using DeepTMHMM
# ---------------------

rule predict_protein_topology:
    input:
        selected_3d_paths_positive=config["paths"]["sequence_prep"]["selected_3d_paths"].replace("{group}", "positive"),
        selected_3d_paths_negative=config["paths"]["sequence_prep"]["selected_3d_paths"].replace("{group}", "negative"),
        sequences_positive=config["paths"]["msa"]["alignments_structure"].replace("{group}", "positive"),
        sequences_negative=config["paths"]["msa"]["alignments_structure"].replace("{group}", "negative")
    output:
        topology_results=config["paths"]["topology"]["topology_predictions"],
        topology_summary=config["paths"]["topology"]["topology_summary"]
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        topology_method=config.get("topology", {}).get("method", "deeptmhmm"),
        topology_dir=lambda wildcards: config["paths"]["topology"]["topology_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset)
    script:
        config["scripts"]["topology"]["predict_topology"]

# Create filtered protein list containing only proteins with surface topology
rule create_surface_protein_list:
    input:
        topology_results=config["paths"]["topology"]["topology_predictions"]
    output:
        surface_proteins_positive="results/{analysis}_{paramset}/protein_analysis/topology_analysis/surface_proteins_gram_positive.txt",
        surface_proteins_negative="results/{analysis}_{paramset}/protein_analysis/topology_analysis/surface_proteins_gram_negative.txt",
        protein_filter_summary=config["paths"]["topology"]["topology_dir"] + "/protein_filter_summary.json"
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        min_extracellular_coverage=config.get("topology", {}).get("min_extracellular_coverage", 0.05),
        min_extracellular_aa=config.get("topology", {}).get("min_extracellular_aa", 30)
    script:
        config["scripts"]["topology"]["create_surface_protein_list"]

# Create extracellular mapping from topology predictions for epitope filtering
rule create_extracellular_mapping:
    input:
        topology_results=config["paths"]["topology"]["topology_predictions"]
    output:
        extracellular_mapping=config["paths"]["topology"]["extracellular_mapping"]
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        min_extracellular_coverage=config.get("topology", {}).get("min_extracellular_coverage", 0.5)
    script:
        config["scripts"]["topology"]["create_extracellular_mapping"]

# ---------------------
# STAGE 3: Multiple Sequence Alignment with MAFFT
# ---------------------

rule mafft_msa_filtered:
    input:
        sequences_dir="results/{analysis}_{paramset}/protein_analysis/msa_fasta/gram_{group}",
        surface_protein_list="results/{analysis}_{paramset}/protein_analysis/topology_analysis/surface_proteins_gram_{group}.txt"
    output:
        alignments_dir=directory("results/{analysis}_{paramset}/protein_analysis/mafft_alignment/gram_{group}")
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}"
    shell:
        "bash scripts/protein_analysis/run_mafft_filtered.sh {input.sequences_dir} {input.surface_protein_list} {output.alignments_dir}"

rule mafft_msa_with_3d_sequence:
    input:
        alignments_dir="results/{analysis}_{paramset}/protein_analysis/mafft_alignment/gram_{group}",
        selected_3d_paths=config["paths"]["sequence_prep"]["selected_3d_paths"]
    output:
        alignments_with_3d_dir=directory("results/{analysis}_{paramset}/protein_analysis/mafft_alignment_with_3d/gram_{group}")
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}"
    shell:
        "bash {config[scripts][msa][add_3d_to_mafft_shell]} {input.alignments_dir} {input.selected_3d_paths} {output.alignments_with_3d_dir}"

# ---------------------
# STAGE 4: Quality Assessment with ConSurf
# ---------------------

rule run_consurf_conservation_analysis:
    input:
        alignments_with_3d_dir="results/{analysis}_{paramset}/protein_analysis/mafft_alignment_with_3d/gram_{group}",
        selected_3d_tsv=config["paths"]["sequence_prep"]["selected_3d_tsv"],
        structures_download_sentinel="data/protein_structures/.{analysis}_{paramset}_{group}_structures_complete",
        protein_filter_summary="results/{analysis}_{paramset}/protein_analysis/topology_analysis/protein_filter_summary.json"
    output:
        consurf_results_dir=directory("results/{analysis}_{paramset}/protein_analysis/consurf_analysis/gram_{group}"),
        consurf_sentinel="results/{analysis}_{paramset}/protein_analysis/consurf_analysis/gram_{group}/.consurf_complete.sentinel"
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}",
        consurf_script=config.get("consurf", {}).get("script_path", "tools/stand_alone_consurf/stand_alone_consurf.py")
    script:
        config["scripts"]["conservation"]["run_consurf_analysis"]



# ---------------------
# STAGE 5: Epitope Prediction with Bepipred and selection according to conservation and topology
# ---------------------

# Predict B-cell epitopes using BepiPred 3.0 on selected 3D structure sequences (surface proteins only)
rule predict_epitopes_bepipred:
    input:
        selected_3d_paths=config["paths"]["sequence_prep"]["selected_3d_paths"],
        protein_filter_summary="results/{analysis}_{paramset}/protein_analysis/topology_analysis/protein_filter_summary.json"
    output:
        bepipred_sentinel=config["paths"]["epitopes"]["bepipred_predictions"] + "/gram_{group}/bepipred_complete.sentinel"
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}"
    script:
        config["scripts"]["epitopes"]["predict_epitopes_bepipred"]

# Create epitope tables from BepiPred 3.0 raw output
rule create_epitope_tables:
    input:
        bepipred_sentinel=config["paths"]["epitopes"]["bepipred_predictions"] + "/gram_{group}/bepipred_complete.sentinel",
        structure_mapping="data/protein_structures/{analysis}_{paramset}_fasta_structure_mapping_final.tsv"
    output:
        epitope_tables_sentinel=config["paths"]["epitopes"]["epitope_tables_sentinel"].replace("epitope_tables_complete.sentinel", "gram_{group}/epitope_tables_complete.sentinel")
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}",
        min_epitope_length=config.get("epitope_analysis", {}).get("min_epitope_length", 6)
    script:
        config["scripts"]["epitopes"]["create_epitope_tables"]

# Filter epitopes to keep only those in extracellular regions
rule filter_epitopes_by_topology:
    input:
        epitope_tables_sentinel=config["paths"]["epitopes"]["epitope_tables_sentinel"].replace("epitope_tables_complete.sentinel", "gram_{group}/epitope_tables_complete.sentinel"),
        extracellular_mapping=config["paths"]["topology"]["extracellular_mapping"],
        pdb_numbering_mapping="data/protein_structures/{analysis}_{paramset}_fasta_structure_mapping_final.tsv"
    output:
        filtered_epitopes_sentinel=config["paths"]["topology"]["filtered_epitopes_sentinel"].replace("filtered_epitopes_complete.sentinel", "gram_{group}/filtered_epitopes_complete.sentinel"),
        topology_filter_report=config["paths"]["topology"]["topology_filter_report"].replace("epitope_filter_report.json", "gram_{group}/epitope_filter_report.json")
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}",
        topology_dir=lambda wildcards: config["paths"]["topology"]["topology_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset),
        min_extracellular_coverage=config.get("topology", {}).get("min_extracellular_coverage", 0.5)
    script:
        config["scripts"]["topology"]["filter_epitopes_topology"]


# ---------------------
# STAGE 7: Epitope Visualization with Pymol
# ---------------------

# Create 3D PyMOL visualizations of selected epitopes on protein structures
rule visualize_epitopes_pymol:
    input:
        epitope_tables_sentinel=config["paths"]["epitopes"]["epitope_tables_sentinel"].replace("epitope_tables_complete.sentinel", "gram_{group}/epitope_tables_complete.sentinel"),
        structures_mapping="data/protein_structures/{analysis}_{paramset}_fasta_structure_mapping_final.tsv"
    output:
        visualization_sentinel=config["paths"]["epitopes"]["bepipred_predictions"] + "/gram_{group}/3d_visualizations/visualization_complete.sentinel"
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}"
    script:
        config["scripts"]["epitopes"]["visualize_epitopes_pymol"]

# ---------------------
# STAGE 8: Integrated Epitope Analysis
# ---------------------

# BLAST cross-reactivity analysis for filtered epitopes
rule blast_epitope_cross_reactivity:
    input:
        filtered_epitopes_sentinel=config["paths"]["topology"]["filtered_epitopes_sentinel"].replace("filtered_epitopes_complete.sentinel", "gram_{group}/filtered_epitopes_complete.sentinel"),
        extracellular_mapping=config["paths"]["topology"]["extracellular_mapping"]
    output:
        blast_results_sentinel=config["paths"]["integrated_epitope_analysis"]["output_dir"] + "/gram_{group}/.blast_complete.sentinel",
        blast_summary=config["paths"]["integrated_epitope_analysis"]["output_dir"] + "/gram_{group}/blast_cross_reactivity_summary.json"
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}",
        blast_databases_dir="data/blast_databases",
        output_dir=lambda wildcards: config["paths"]["integrated_epitope_analysis"]["output_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset) + f"/gram_{wildcards.group}"
    script:
        config["scripts"]["integrated_analysis"]["blast_cross_reactivity"]

# Integrated analysis combining BepiPred, ConSurf, Topology, and BLAST data
rule integrate_epitope_analysis:
    input:
        filtered_epitopes_sentinel=config["paths"]["topology"]["filtered_epitopes_sentinel"].replace("filtered_epitopes_complete.sentinel", "gram_{group}/filtered_epitopes_complete.sentinel"),
        consurf_sentinel=config["paths"]["conservation"]["consurf_sentinel"],
        blast_results_sentinel=config["paths"]["integrated_epitope_analysis"]["output_dir"] + "/gram_{group}/.blast_complete.sentinel",
        extracellular_mapping=config["paths"]["topology"]["extracellular_mapping"]
    output:
        integrated_sentinel=config["paths"]["integrated_epitope_analysis"]["sentinel"].replace("integrated_analysis_complete.sentinel", "gram_{group}/integrated_analysis_complete.sentinel"),
        comprehensive_report=config["paths"]["integrated_epitope_analysis"]["output_dir"] + "/gram_{group}/comprehensive_epitope_report.html"
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}",
        output_dir=lambda wildcards: config["paths"]["integrated_epitope_analysis"]["output_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset) + f"/gram_{wildcards.group}"
    script:
        config["scripts"]["integrated_analysis"]["integrate_comprehensive_analysis"]

# Create comprehensive epitope visualizations for all genes
rule create_comprehensive_epitope_visualizations:
    input:
        integrated_sentinel=config["paths"]["integrated_epitope_analysis"]["sentinel"].replace("integrated_analysis_complete.sentinel", "gram_{group}/integrated_analysis_complete.sentinel")
    output:
        visualization_sentinel=config["paths"]["integrated_epitope_analysis"]["output_dir"] + "/gram_{group}/.visualization_complete.sentinel"
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}"
    shell:
        "python scripts/protein_analysis/run_comprehensive_visualizations.py --analysis {params.analysis} --paramset {params.paramset} --group {params.group} && touch {output.visualization_sentinel}"

# ---------------------
# STAGE 9: Summaries and Reports
# ---------------------

# Run epitope conservation analysis for all genes (using topology-filtered epitopes)
rule analyze_epitope_conservation:
    input:
        filtered_epitopes_sentinel=config["paths"]["topology"]["filtered_epitopes_sentinel"].replace("filtered_epitopes_complete.sentinel", "gram_{group}/filtered_epitopes_complete.sentinel"),
        msa_sequences=lambda wildcards: config["paths"]["msa"]["alignments_structure"].format(analysis=wildcards.analysis, paramset=wildcards.paramset, group=wildcards.group),
        selected_3d_paths=config["paths"]["sequence_prep"]["selected_3d_paths"],
        pdb_numbering_mapping="data/protein_structures/{analysis}_{paramset}_fasta_structure_mapping_final.tsv"
    output:
        conservation_analysis_sentinel=config["paths"]["epitopes"]["conservation_analysis_sentinel"].replace("conservation_analysis_complete.sentinel", "gram_{group}/conservation_analysis_complete.sentinel")
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}",
        conservation_analysis_dir=lambda wildcards: config["paths"]["epitopes"]["conservation_analysis_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset) + f"/gram_{wildcards.group}"
    script:
        "scripts/protein_analysis/run_conservation_analysis_batch.py"

# Generate comprehensive epitope conservation analysis report
rule generate_epitope_conservation_report:
    input:
        conservation_analysis_sentinel=config["paths"]["epitopes"]["conservation_analysis_sentinel"].replace("conservation_analysis_complete.sentinel", "gram_{group}/conservation_analysis_complete.sentinel")
    output:
        conservation_report=config["paths"]["epitopes"]["conservation_report"].replace("protein_analysis_report.html", "gram_{group}/protein_analysis_report.html")
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}",
        conservation_analysis_dir=lambda wildcards: config["paths"]["epitopes"]["conservation_analysis_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset) + f"/gram_{wildcards.group}"
    script:
        "scripts/protein_analysis/generate_epitope_conservation_report.py"
