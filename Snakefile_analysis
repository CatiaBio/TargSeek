# Snakefile_analysis
# ------------------------------------------------------
# TargSeek Analysis Workflow
#
# This pipeline performs MSA (MAFFT), alignment trimming, quality assessment,
# conservation analysis, epitope prediction, and report generation.
#
# Configuration: config/config_analysis.yaml
# Usage Guide: USAGE_ANALYSIS.txt
#
# Quick Start: snakemake -s Snakefile_analysis all_analysis --cores 4
# ------------------------------------------------------

# Load configuration
configfile: "config/config_analysis.yaml"

# Define wildcard constraints to prevent ambiguous matches
wildcard_constraints:
    analysis="analysis[0-9]+",
    paramset="params[0-9]+",
    use_3d_dir="(no_3d|with_3d)"


# =============================================================================
# TARGET RULES
# =============================================================================

# Complete analysis pipeline - all stages
rule all_analysis:
    input:
        expand(
            [
                config["paths"]["conservation"]["results_structure"],
                config["paths"]["conserved"]["raw_sequences_structure"],
                config["paths"]["conserved"]["trimmed_sequences_structure"]
            ],
            analysis=config["species_batches"],
            paramset=config["quickgo_paramsets"],
            group=["positive", "negative"]
        ) + expand(
            [
                config["paths"]["epitopes"]["epitope_tables_sentinel"],
                config["paths"]["topology"]["filtered_epitopes_sentinel"],
                config["paths"]["topology"]["topology_filter_report"]
            ],
            analysis=config["species_batches"],
            paramset=config["quickgo_paramsets"]
        ) + expand(
            [config["paths"]["epitopes"]["conservation_report"]],
            analysis=config["species_batches"],
            paramset=config["quickgo_paramsets"]
        )


# =============================================================================
# ANALYSIS RULES
# =============================================================================

# ---------------------
# STAGE 1: Create sequences with diversity-based selection
# ---------------------

rule select_sequences_for_msa:
    input:
        gene_lists=config["paths"]["input"]["gene_lists"],
        protein_download_sentinel=config["paths"]["input"]["protein_download_sentinel"]
    output:
        sequences_dir=directory("results/{analysis}_{paramset}/protein_analysis/msa_fasta/gram_{group}")
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}"
    script:
        config["scripts"]["sequence_prep"]["create_sequences"]

# ---------------------
# STAGE 2: Select optimal 3D structures using 5 sequences from MSA
# ---------------------

rule select_3d_sequence_per_protein:
    input:
        reference_dir=config["paths"]["sequence_prep"]["msa_sequence_refs"],
        protein_download_sentinel=config["paths"]["input"]["protein_download_sentinel"],
        structures_download_sentinel=config["paths"]["input"]["structures_download_sentinel"]
    output:
        selected_3d_paths=config["paths"]["sequence_prep"]["selected_3d_paths"],
        selected_3d_tsv=config["paths"]["sequence_prep"]["selected_3d_tsv"]
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}",
        structure_selection_method=config.get("structure_selection", {}).get("method", "similarity"),
        max_structures_per_gene=config.get("structure_selection", {}).get("max_structures_per_gene", 1),
        min_similarity_score=config.get("structure_selection", {}).get("min_similarity_score", 0.1),
        similarity_method=config.get("structure_selection", {}).get("similarity_method", "local_alignment")
    script:
        config["scripts"]["sequence_prep"]["select_3d_from_sequences"]

# ---------------------
# STAGE 3: Multiple Sequence Alignment with MAFFT
# ---------------------

rule mafft_msa:
    input:
        sequences_dir="results/{analysis}_{paramset}/protein_analysis/msa_fasta/gram_{group}"
    output:
        alignments_dir=directory("results/{analysis}_{paramset}/protein_analysis/mafft_alignment/gram_{group}")
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}"
    shell:
        "bash scripts/protein_analysis/run_mafft.sh {input.sequences_dir} {output.alignments_dir}"

rule mafft_msa_with_3d_sequence:
    input:
        alignments_dir="results/{analysis}_{paramset}/protein_analysis/mafft_alignment/gram_{group}",
        selected_3d_paths=config["paths"]["sequence_prep"]["selected_3d_paths"]
    output:
        alignments_with_3d_dir=directory("results/{analysis}_{paramset}/protein_analysis/mafft_alignment_with_3d/gram_{group}")
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        group="{group}"
    shell:
        "bash scripts/protein_analysis/add_3d_to_mafft.sh {input.alignments_dir} {input.selected_3d_paths} {output.alignments_with_3d_dir}"

# ---------------------
# STAGE 4: Quality Assessment with Consurf
# ---------------------

rule assess_msa_aa_conservation:


# ---------------------
# STAGE 5: Predict membrane protein topology using DeepTMHMM
# ---------------------

rule predict_protein_topology:
    input:
        selected_3d_paths_positive=config["paths"]["sequence_prep"]["selected_3d_paths"].replace("{group}", "positive"),
        selected_3d_paths_negative=config["paths"]["sequence_prep"]["selected_3d_paths"].replace("{group}", "negative"),
        sequences_positive=config["paths"]["msa"]["sequences_structure"].replace("{group}", "positive"),
        sequences_negative=config["paths"]["msa"]["sequences_structure"].replace("{group}", "negative")
    output:
        topology_results=config["paths"]["topology"]["topology_predictions"],
        topology_summary=config["paths"]["topology"]["topology_summary"]
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        topology_method=config.get("topology", {}).get("method", "deeptmhmm"),
        topology_dir=lambda wildcards: config["paths"]["topology"]["topology_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset)
    script:
        config["scripts"]["topology"]["predict_topology"]

# ---------------------
# STAGE 6: Epitope Prediction with Bepipred and selection according to conservation and topology
# ---------------------

# Predict B-cell epitopes using BepiPred 3.0 on selected 3D structure sequences
rule predict_epitopes_bepipred:
    input:
        selected_3d_paths_positive=config["paths"]["sequence_prep"]["selected_3d_paths"].replace("{group}", "positive"),
        selected_3d_paths_negative=config["paths"]["sequence_prep"]["selected_3d_paths"].replace("{group}", "negative")
    output:
        bepipred_sentinel=config["paths"]["epitopes"]["bepipred_predictions"] + "/bepipred_complete.sentinel"
    params:
        analysis="{analysis}",
        paramset="{paramset}"
    script:
        config["scripts"]["epitopes"]["predict_epitopes_bepipred"]

# Create epitope tables from BepiPred 3.0 raw output
rule create_epitope_tables:
    input:
        bepipred_sentinel=config["paths"]["epitopes"]["bepipred_predictions"] + "/bepipred_complete.sentinel",
        structure_mapping="data/protein_structures/{analysis}_{paramset}_fasta_structure_mapping_final.tsv"
    output:
        epitope_tables_sentinel=config["paths"]["epitopes"]["epitope_tables_sentinel"]
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        min_epitope_length=config.get("epitope_analysis", {}).get("min_epitope_length", 6)
    script:
        config["scripts"]["epitopes"]["create_epitope_tables"]

# Filter epitopes to keep only those in extracellular regions
rule filter_epitopes_by_topology:
    input:
        epitope_tables_sentinel=config["paths"]["epitopes"]["epitope_tables_sentinel"],
        extracellular_mapping=config["paths"]["topology"]["extracellular_mapping"],
        pdb_numbering_mapping="data/protein_structures/{analysis}_{paramset}_fasta_structure_mapping_final.tsv"
    output:
        filtered_epitopes_sentinel=config["paths"]["topology"]["filtered_epitopes_sentinel"],
        topology_filter_report=config["paths"]["topology"]["topology_filter_report"]
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        topology_dir=lambda wildcards: config["paths"]["topology"]["topology_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset),
        min_extracellular_coverage=config.get("topology", {}).get("min_extracellular_coverage", 0.5)
    script:
        config["scripts"]["topology"]["filter_epitopes_topology"]

# Rank extracellular epitopes based on conservation
rule rank_extracellular_epitopes:
    input:
        epitope_tables_sentinel=config["paths"]["epitopes"]["epitope_tables_sentinel"],
        extracellular_mapping=config["paths"]["topology"]["extracellular_mapping"],
        pdb_numbering_mapping="data/protein_structures/{analysis}_{paramset}_fasta_structure_mapping_final.tsv"
    output:
        filtered_epitopes_sentinel=config["paths"]["topology"]["filtered_epitopes_sentinel"],
        topology_filter_report=config["paths"]["topology"]["topology_filter_report"]
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        topology_dir=lambda wildcards: config["paths"]["topology"]["topology_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset),
        min_extracellular_coverage=config.get("topology", {}).get("min_extracellular_coverage", 0.5)
    script:
        config["scripts"]["topology"]["filter_epitopes_topology"]

# ---------------------
# STAGE 7: Epitope Visualization with Pymol
# ---------------------

# Create 3D PyMOL visualizations of selected epitopes on protein structures
rule visualize_epitopes_pymol:
    input:
        epitope_tables_sentinel=config["paths"]["epitopes"]["epitope_tables_sentinel"],
        structures_mapping="data/protein_structures/{analysis}_{paramset}_fasta_structure_mapping_final.tsv"
    output:
        visualization_sentinel=config["paths"]["epitopes"]["bepipred_predictions"] + "/3d_visualizations/visualization_complete.sentinel"
    params:
        analysis="{analysis}",
        paramset="{paramset}"
    script:
        config["scripts"]["epitopes"]["visualize_epitopes_pymol"]

# ---------------------
# STAGE 8: Summaries and Reports
# ---------------------

# Run epitope conservation analysis for all genes (using topology-filtered epitopes)
rule analyze_epitope_conservation:
    input:
        filtered_epitopes_sentinel=config["paths"]["topology"]["filtered_epitopes_sentinel"],
        msa_sequences_positive=lambda wildcards: config["paths"]["msa"]["sequences_structure"].replace("{group}", "positive").format(analysis=wildcards.analysis, paramset=wildcards.paramset),
        msa_sequences_negative=lambda wildcards: config["paths"]["msa"]["sequences_structure"].replace("{group}", "negative").format(analysis=wildcards.analysis, paramset=wildcards.paramset),
        selected_3d_positive=lambda wildcards: config["paths"]["sequence_prep"]["selected_3d_paths"].replace("{group}", "positive").format(analysis=wildcards.analysis, paramset=wildcards.paramset),
        selected_3d_negative=lambda wildcards: config["paths"]["sequence_prep"]["selected_3d_paths"].replace("{group}", "negative").format(analysis=wildcards.analysis, paramset=wildcards.paramset),
        pdb_numbering_mapping="data/protein_structures/{analysis}_{paramset}_fasta_structure_mapping_final.tsv"
    output:
        conservation_analysis_sentinel=config["paths"]["epitopes"]["conservation_analysis_sentinel"]
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        conservation_analysis_dir=lambda wildcards: config["paths"]["epitopes"]["conservation_analysis_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset)
    script:
        "scripts/protein_analysis/run_conservation_analysis_batch.py"

# Generate comprehensive epitope conservation analysis report
rule generate_epitope_conservation_report:
    input:
        conservation_analysis_sentinel=config["paths"]["epitopes"]["conservation_analysis_sentinel"]
    output:
        conservation_report=config["paths"]["epitopes"]["conservation_report"]
    params:
        analysis="{analysis}",
        paramset="{paramset}",
        conservation_analysis_dir=lambda wildcards: config["paths"]["epitopes"]["conservation_analysis_dir"].format(analysis=wildcards.analysis, paramset=wildcards.paramset)
    script:
        "scripts/protein_analysis/generate_epitope_conservation_report.py"
